> Task :common:compileJava UP-TO-DATE
> Task :common:processResources NO-SOURCE
> Task :common:classes UP-TO-DATE
> Task :common:jar UP-TO-DATE
> Task :spes:compileJava UP-TO-DATE
> Task :spes:processResources NO-SOURCE
> Task :spes:classes UP-TO-DATE
> Task :spes:jar UP-TO-DATE
> Task :sql:antlrMysql
> Task :sql:copyMysql NO-SOURCE
> Task :sql:antlrPg
> Task :sql:copyPg NO-SOURCE
> Task :sql:compileJava UP-TO-DATE
> Task :sql:processResources UP-TO-DATE
> Task :sql:classes UP-TO-DATE
> Task :sql:jar UP-TO-DATE
> Task :stmt:compileJava UP-TO-DATE
> Task :stmt:processResources UP-TO-DATE
> Task :stmt:classes UP-TO-DATE
> Task :stmt:jar UP-TO-DATE
> Task :superopt:compileJava UP-TO-DATE
> Task :superopt:processResources UP-TO-DATE
> Task :superopt:classes UP-TO-DATE

> Task :superopt:run
1. Rule String
  Proj<a2 s1>(InSubFilter<a1>(Input<t0>,Proj<a0 s0>(Input<t1>)))|Proj<a5 s2>(InnerJoin<a3 a4>(Input<t2>,Input<t3>))|AttrsSub(a0,t1);AttrsSub(a1,t0);AttrsSub(a2,t0);Unique(t1,a0);TableEq(t2,t0);TableEq(t3,t1);AttrsEq(a3,a1);AttrsEq(a4,a0);AttrsEq(a5,a2);SchemaEq(s2,s1)

2. Example Query
  SELECT `t0`.`c2` AS `c2` FROM `r0` AS `t0` WHERE `t0`.`c1` IN (SELECT `t1`.`c0` AS `c0` FROM `r1` AS `t1`)
  SELECT `t0`.`c2` AS `c2` FROM `r0` AS `t0` INNER JOIN `r1` AS `t1` ON `t0`.`c1` = `t1`.`c0`

3. U-Expression
  [[q0]](x2) := ∑{x0,x1}([x2 = a2(x0)] * t0(x0) * [a1(x0) = a0(x1)] * not([IsNull(a0(x1))]) * t1(x1))
  [[q1]](x2) := ∑{x0,x1}([x2 = a2(x0)] * t0(x0) * [a1(x0) = a0(x1)] * not([IsNull(a0(x1))]) * t1(x1))

4. First-Order Formulas (Z3 Script)
==== Begin of Snippet-1 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a2 (Int Tuple) Tuple)
(declare-fun x2 () Tuple)
(declare-fun x1 () Tuple)
(declare-fun x0 () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a2 s x) Null))))
(assert (forall ((x Tuple)) (<= (t1 x) 1)))
(assert (forall ((x Tuple) (y Tuple))
  (=> (and (> (t1 x) 0) (> (t1 y) 0) (= (a0 2 x) (a0 2 y))) (= x y))))
(assert (= x2 x2))
(assert (let ((a!1 (ite (and (= x2 (a2 1 x0))
                     (= (a1 1 x0) (a0 2 x1))
                     (not (= (a0 2 x1) Null)))
                (* (t0 x0) (t1 x1))
                0)))
  (not (= a!1 a!1))))

(check-sat)
==== End of Snippet-1 ====
==> Result: UNSATISFIABLE

Rule-24: EQ

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.3/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 3s
15 actionable tasks: 3 executed, 12 up-to-date
