> Task :common:compileJava UP-TO-DATE
> Task :common:processResources NO-SOURCE
> Task :common:classes UP-TO-DATE
> Task :common:jar UP-TO-DATE
> Task :spes:compileJava UP-TO-DATE
> Task :spes:processResources NO-SOURCE
> Task :spes:classes UP-TO-DATE
> Task :spes:jar UP-TO-DATE
> Task :sql:antlrMysql
> Task :sql:copyMysql NO-SOURCE
> Task :sql:antlrPg
> Task :sql:copyPg NO-SOURCE
> Task :sql:compileJava UP-TO-DATE
> Task :sql:processResources UP-TO-DATE
> Task :sql:classes UP-TO-DATE
> Task :sql:jar UP-TO-DATE
> Task :stmt:compileJava UP-TO-DATE
> Task :stmt:processResources UP-TO-DATE
> Task :stmt:classes UP-TO-DATE
> Task :stmt:jar UP-TO-DATE
> Task :superopt:compileJava UP-TO-DATE
> Task :superopt:processResources UP-TO-DATE
> Task :superopt:classes UP-TO-DATE

> Task :superopt:run
1. Rule String
  Proj<a3 s1>(InnerJoin<a1 a2>(Input<t0>,Proj*<a0 s0>(Input<t1>)))|Proj<a6 s3>(InSubFilter<a5>(Input<t2>,Proj<a4 s2>(Input<t3>)))|AttrsEq(a2,a0);AttrsSub(a0,t1);AttrsSub(a1,t0);AttrsSub(a2,s0);AttrsSub(a3,t0);TableEq(t2,t0);TableEq(t3,t1);AttrsEq(a4,a0);AttrsEq(a5,a1);AttrsEq(a6,a3);SchemaEq(s2,s0);SchemaEq(s3,s1)

2. Example Query
  SELECT `t0`.`c2` AS `c2` FROM `r0` AS `t0` INNER JOIN (SELECT DISTINCT `t1`.`c0` AS `c0` FROM `r1` AS `t1`) AS `q0` ON `t0`.`c1` = `q0`.`c0`
  SELECT `t0`.`c2` AS `c2` FROM `r0` AS `t0` WHERE `t0`.`c1` IN (SELECT `t1`.`c0` AS `c0` FROM `r1` AS `t1`)

3. U-Expression
  [[q0]](x3) := ∑{x0,x2}([x3 = a3(x0)] * t0(x0) * [a1(x0) = a0(x2)] * not([IsNull(a0(x2))]) * ||∑{x1}([x2 = a0(x1)] * t1(x1))||)
  [[q1]](x3) := ∑{x0}([x3 = a3(x0)] * t0(x0) * ||∑{x1}([a1(x0) = a0(x1)] * not([IsNull(a0(x1))]) * t1(x1))||)

4. First-Order Formulas (Z3 Script)
==== Begin of Snippet-1 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a3 (Int Tuple) Tuple)
(declare-fun x3 () Tuple)
(declare-fun x0 () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a3 s x) Null))))
(assert (forall ((x Tuple)) (= (a0 4 x) (a0 2 x))))
(assert (forall ((x Tuple) (s Int)) (= (a0 4 (a0 s x)) (a0 s x))))
(assert (= x3 x3))
(assert (not (= (ite (and (= x3 (a3 1 x0))
                  (exists ((x1 Tuple))
                    (and (= (a1 1 x0) (a0 2 x1))
                         (not (= (a0 2 x1) Null))
                         (> (t1 x1) 0))))
             (t0 x0)
             0)
        (ite (= x3 (a3 1 x0)) (t0 x0) 0))))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))

(check-sat)
==== End of Snippet-1 ====
==> Result: UNSATISFIABLE
==== Begin of Snippet-2 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a3 (Int Tuple) Tuple)
(declare-fun x3 () Tuple)
(declare-fun x0 () Tuple)
(declare-fun x2 () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a3 s x) Null))))
(assert (forall ((x Tuple)) (= (a0 4 x) (a0 2 x))))
(assert (forall ((x Tuple) (s Int)) (= (a0 4 (a0 s x)) (a0 s x))))
(assert (= x3 x3))
(assert (not (= (ite (and (= x3 (a3 1 x0))
                  (exists ((x1 Tuple))
                    (and (= (a1 1 x0) (a0 2 x1))
                         (not (= (a0 2 x1) Null))
                         (> (t1 x1) 0))))
             (t0 x0)
             0)
        (ite (= x3 (a3 1 x0)) (t0 x0) 0))))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (not (and (= x3 (a3 1 x0))
          (> (t0 x0) 0)
          (exists ((x1 Tuple))
            (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0))))))
(assert (and (= x3 (a3 1 x0)) (> (t0 x0) 0)))
(assert (and (= (a1 1 x0) (a0 4 x2))
     (not (= (a0 4 x2) Null))
     (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))

(check-sat)
==== End of Snippet-2 ====
==> Result: UNSATISFIABLE
==== Begin of Snippet-3 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a3 (Int Tuple) Tuple)
(declare-fun x3 () Tuple)
(declare-fun x0 () Tuple)
(declare-fun x2 () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a3 s x) Null))))
(assert (forall ((x Tuple)) (= (a0 4 x) (a0 2 x))))
(assert (forall ((x Tuple) (s Int)) (= (a0 4 (a0 s x)) (a0 s x))))
(assert (= x3 x3))
(assert (not (= (ite (and (= x3 (a3 1 x0))
                  (exists ((x1 Tuple))
                    (and (= (a1 1 x0) (a0 2 x1))
                         (not (= (a0 2 x1) Null))
                         (> (t1 x1) 0))))
             (t0 x0)
             0)
        (ite (= x3 (a3 1 x0)) (t0 x0) 0))))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (not (and (= x3 (a3 1 x0))
          (> (t0 x0) 0)
          (exists ((x1 Tuple))
            (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0))))))
(assert (and (= x3 (a3 1 x0)) (> (t0 x0) 0)))
(assert (and (= (a1 1 x0) (a0 4 x2))
     (not (= (a0 4 x2) Null))
     (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (forall ((x2 Tuple))
  (not (and (= (a1 1 x0) (a0 4 x2))
            (not (= (a0 4 x2) Null))
            (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))))

(check-sat)
==== End of Snippet-3 ====
==> Result: UNSATISFIABLE
==== Begin of Snippet-4 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a3 (Int Tuple) Tuple)
(declare-fun x3 () Tuple)
(declare-fun x0 () Tuple)
(declare-fun x2 () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a3 s x) Null))))
(assert (forall ((x Tuple)) (= (a0 4 x) (a0 2 x))))
(assert (forall ((x Tuple) (s Int)) (= (a0 4 (a0 s x)) (a0 s x))))
(assert (= x3 x3))
(assert (not (= (ite (and (= x3 (a3 1 x0))
                  (exists ((x1 Tuple))
                    (and (= (a1 1 x0) (a0 2 x1))
                         (not (= (a0 2 x1) Null))
                         (> (t1 x1) 0))))
             (t0 x0)
             0)
        (ite (= x3 (a3 1 x0)) (t0 x0) 0))))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (not (and (= x3 (a3 1 x0))
          (> (t0 x0) 0)
          (exists ((x1 Tuple))
            (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0))))))
(assert (and (= x3 (a3 1 x0)) (> (t0 x0) 0)))
(assert (and (= (a1 1 x0) (a0 4 x2))
     (not (= (a0 4 x2) Null))
     (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (forall ((x2 Tuple))
  (not (and (= (a1 1 x0) (a0 4 x2))
            (not (= (a0 4 x2) Null))
            (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (> (ite (and (= (a1 1 x0) (a0 4 x2))
             (not (= (a0 4 x2) Null))
             (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0))))
        1
        0)
   1))

(check-sat)
==== End of Snippet-4 ====
==> Result: UNSATISFIABLE
==== Begin of Snippet-5 ====
(declare-sort Tuple 0)
(declare-fun t0 (Tuple) Int)
(declare-fun t1 (Tuple) Int)
(declare-fun Null () Tuple)
(declare-fun a0 (Int Tuple) Tuple)
(declare-fun a1 (Int Tuple) Tuple)
(declare-fun a3 (Int Tuple) Tuple)
(declare-fun x3 () Tuple)
(declare-fun x0 () Tuple)
(declare-fun x2 () Tuple)
(declare-fun Z (Tuple) Bool)
(declare-fun x2_ () Tuple)
(assert (forall ((x Tuple)) (>= (t0 x) 0)))
(assert (forall ((x Tuple)) (>= (t1 x) 0)))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a0 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a1 s x) Null))))
(assert (forall ((x Tuple) (s Int)) (=> (= x Null) (= (a3 s x) Null))))
(assert (forall ((x Tuple)) (= (a0 4 x) (a0 2 x))))
(assert (forall ((x Tuple) (s Int)) (= (a0 4 (a0 s x)) (a0 s x))))
(assert (= x3 x3))
(assert (not (= (ite (and (= x3 (a3 1 x0))
                  (exists ((x1 Tuple))
                    (and (= (a1 1 x0) (a0 2 x1))
                         (not (= (a0 2 x1) Null))
                         (> (t1 x1) 0))))
             (t0 x0)
             0)
        (ite (= x3 (a3 1 x0)) (t0 x0) 0))))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (not (and (= x3 (a3 1 x0))
          (> (t0 x0) 0)
          (exists ((x1 Tuple))
            (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0))))))
(assert (and (= x3 (a3 1 x0)) (> (t0 x0) 0)))
(assert (and (= (a1 1 x0) (a0 4 x2))
     (not (= (a0 4 x2) Null))
     (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (forall ((x2 Tuple))
  (not (and (= (a1 1 x0) (a0 4 x2))
            (not (= (a0 4 x2) Null))
            (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (> (ite (and (= (a1 1 x0) (a0 4 x2))
             (not (= (a0 4 x2) Null))
             (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0))))
        1
        0)
   1))
(assert (forall ((x2 Tuple))
  (= (Z x2)
     (and (= (a1 1 x0) (a0 4 x2))
          (not (= (a0 4 x2) Null))
          (exists ((x1 Tuple)) (and (= x2 (a0 2 x1)) (> (t1 x1) 0)))))))
(assert (not (= x2 x2_)))
(assert (= (ite (and (= x3 (a3 1 x0))
             (exists ((x1 Tuple))
               (and (= (a1 1 x0) (a0 2 x1))
                    (not (= (a0 2 x1) Null))
                    (> (t1 x1) 0))))
        (t0 x0)
        0)
   (ite (= x3 (a3 1 x0)) (t0 x0) 0)))
(assert (and (= x3 (a3 1 x0))
     (> (t0 x0) 0)
     (exists ((x1 Tuple))
       (and (= (a1 1 x0) (a0 2 x1)) (not (= (a0 2 x1) Null)) (> (t1 x1) 0)))))
(assert (Z x2))
(assert (Z x2_))

(check-sat)
==== End of Snippet-5 ====
==> Result: UNSATISFIABLE

Rule-25: EQ

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.3/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 4s
15 actionable tasks: 3 executed, 12 up-to-date
